# **Инструкция по работе с системой версий Git**

![Логотип](git.jpg)

Git - это консольная утилита, для отслеживания и ведения истории изменения файлов, в вашем проекте. Чаще всего его используют для кода, но можно и для других файлов. Например, для картинок - полезно для дизайнеров.

С помощью Git-a вы можете откатить свой проект до более старой версии, сравнивать, анализировать или сливать свои изменения в репозиторий.

## Инициализация репозитория

Чтобы инициализировать репозиторий, нужно ввести команду:

    git init

Команда git init создает новый репозиторий Git. С ее помощью можно преобразовать существующий проект без управления версиями в репозиторий Git или инициализировать новый пустой репозиторий.

## Проверка состояния репозитория

Чтобы проверить состояние репозитория, нужно ввести команду:

    git status

Команда git status отображает состояние рабочего каталога и раздела проиндексированных файлов. С ее помощью можно проверить индексацию изменений и увидеть файлы, которые не отслеживаются Git. 

## Добавление версионности 

Чтобы добавить изменения в репозиторий (сохранить изменения в буфере), нужно ввести команду:

    git add <имя_файла>

Команда git add — это первая команда в цепочке операций, предписывающей Git «сохранить» снимок текущего состояния проекта в истории коммитов. Когда git add используется как отдельная команда, она переносит ожидающие изменения из рабочего каталога в раздел проиндексированных файлов.

Для того, чтобы «сохранить» добавленную или изменённую информацию, необходимо:

1. Сохранить информацию с помощью комбинации Ctrl+S (необходимо запомнить, достаточно важный пункт).
2. Ввести в терминал вышеуказанную команду.

## Фиксация изменений

Чтобы описать добавленные изменения в репозитории, нужно ввести команду:

    git commit -m "сообщение"

Это команда Git для записи индексированных изменений в репозиторий. Эта метка используется для обозначения всех вопросов, связанных с созданием, редактированием и внутренней структурой коммитов в Git.
Используется в паре с **git add** и только после него.

## Просмотр истории коммитов

Чтобы просмотреть все добавленные коммиты, необходимо ввести команду:

    git log

Чтобы просмотреть более сокращённый (простой) список добавленных коммитов, необходимо ввести команду:

    git log --oneline

Чтобы просмотреть все слияния и ветки с коммитами, необходимо ввести команду:

    git log --graph

Чтобы просмотреть все слияния и ветки с коммитами в более сокращённом (простом) виде, необходимо ввести команду:

    git log --graph --oneline --all
    
## Переключение между версиями

Чтобы переключиться на определённую версию репозитория, нужно ввести команду:

    git checkout <имя_ветки>

Команда git checkout позволяет перемещаться между ветками, созданными командой git branch . При переключении ветки происходит обновление файлов в рабочем каталоге в соответствии с версией, хранящейся в этой ветке, а Git начинает записывать все новые коммиты в этой ветке.

Чтобы вернуться на последнюю версию репозитория, нужно ввести команду:

    git checkout master
    
## Просмотр изменений репозитория

Чтобы просмотреть последнее измнение репозитория, а так же сравнить изменения определённых версий, нужно ввести команду:

    git diff

Команда для сравнения версий выглядит примерно так:

    git diff <имя_первой_ветки> <имя_второй_ветки>

## Ветвление в Git

Ветвление в Git позволяет нам работать параллельно с разными задачами в одном репозитории.

Ветвление означает, что происходит отклонение от основной линии разработки и продолжение работы, не вмешиваясь в основную линию.

![Ветвление](git1.png)

## Создание новой ветки

Чтобы создать новую ветку, необходимо ввести команду:

    git branch <имя_ветки>

Созданных веток может быть n-е количество. Они, в отличие от основной ветки, больше походят на черновик. При слиянии в основную ветку всегда можно выбрать тот или иной вариант, который больше подходит.
Так же такие ветки можно сливать между собой.

## Слияние веток

Для того, чтобы влить одну ветку в другую, необходимо находиться в той ветке, в **которую** будет вливаться другая. Для этого необходимо ввести команду:

    git merge <имя_вливаемой_ветки>

Слияние используется в Git, чтобы собрать воедино разветвленную историю. Команда git merge выполняет слияние отдельных направлений разработки, созданных с помощью команды git branch , в единую ветку. fhb

![Слfjksjvние](git3.png)

## Удаление ветки

Чтобы удалить уже использованную или лишнюю ветку, необходимо выполнить команду:

    git branch -d <имя_ветки>

Для того, чтобы корректно удалить ненужную ветку, необходимо:

1. Перейти на основную ветку (master).
2. Слить данную ветку в основную, чтобы не потерять все изменения с ненужной ветки.
3. Сохранить добавленную информацию на основной ветке.
4. Закоммитить сохранение.
5. Только после этого можно удалить ненужную ветку с помощью вышеуказанной команды.